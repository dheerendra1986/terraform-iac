name: 'Terraform'

on:
  push:
    branches:
    - "dev"
    - "prod"
  pull_request:
    branches:
       - main

permissions:
  contents: read

jobs:
  Dev_Deployment:
    name: 'Terraform_dev'
    runs-on: ubuntu-latest
    environment: Dev

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      env:
       GOOGLE_CREDENTIALS: ${{secrets.GOOGLE_CREDENTIALS}}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform init
      run: |
       cd custom-role/tenants
       terraform init
      env:
       GOOGLE_CREDENTIALS: ${{secrets.GOOGLE_CREDENTIALS}}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
       cd custom-role/tenants
       terraform plan -input=false -lock=false
      env:
       GOOGLE_CREDENTIALS: ${{secrets.GOOGLE_CREDENTIALS}}

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.base_ref == 'main' && github.event_name == 'pull_request'
      run: |
        cd custom-role/tenants
        terraform apply -auto-approve -input=false
      env:
       GOOGLE_CREDENTIALS: ${{secrets.GOOGLE_CREDENTIALS}}

  